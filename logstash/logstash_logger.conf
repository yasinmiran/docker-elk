input {
	file {
    		path => "/home/avarjana/wso2/Practice/session-5.9/wso2is-5.9.0+1601471098236.full/wso2is-5.9.0/repository/logs/wso2carbon.log"
		start_position => "beginning"
		codec => multiline {
		  	pattern => "^ Event:"
		  	what => "previous"
		}
  	}
}

filter {
	if " Event:" not in [message] {
	  drop {}
	}
	grok {
		match => {"message" => " Unique ID: %{GREEDYDATA:eventType},\n Event: %{GREEDYDATA:eventdata}"}
	}
	json {
		source => "eventdata"
		remove_field => ["eventdata","message"]
	}
	#geo ip filter to transform the IP address to location
	geoip {
    		source => "[event][payloadData][remoteIp]"
    	}

	#ruby code to convert the comma seperated roles into an array
	ruby{
	     code =>"

		 # method to split the supplied string by comma, trim whitespace and return an array
		 def mapStringToArray(strFieldValue)

		    #if string is not null, return array
		    if (strFieldValue != nil)
		        fieldArr =  strFieldValue.split(',').map(&:strip).reject(&:empty?).uniq 
		        return fieldArr                             
		    end     

		    return [] #return empty array if string is nil
		 end

		 vrtArr = mapStringToArray(event.get('[event][payloadData][rolesCommaSeparated]'))
		 if vrtArr.length > 0                           
		    event.set('[event][payloadData][rolesCommaSeparated]', vrtArr) 
		 end
	"
	}

	# debug timestamp
	if ("" in [mtime]) {
		date {
    			match => [ "mtime" , "yyyy-MM-dd HH:mm:ss.SSS" ]
    			target => "@timestamp"
			locale => "en"
			timezone => "Asia/Colombo"
		}
	}
}

output {
	#seperating event type as auth and session via the eventtype
	if [eventType] == "auth" {
		elasticsearch {
			hosts => ["localhost:9200"]
			index => "auth"
		}
	} else if [eventType] == "session" {
		elasticsearch {
			hosts => ["localhost:9200"]
			index => "session"
			document_id => "%{[event][payloadData][sessionId]}"
		}
	}
	
}

